/*
 * ValorantEsports OpenApi Specification
 * Unofficial documentation to the ValorantEsports Api
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ValorantEsportsOpenApiSpecification);
  }
}(this, function(expect, ValorantEsportsOpenApiSpecification) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('GetEventDetailsDataEventMatchVods', function() {
      beforeEach(function() {
        instance = new ValorantEsportsOpenApiSpecification.GetEventDetailsDataEventMatchVods();
      });

      it('should create an instance of GetEventDetailsDataEventMatchVods', function() {
        // TODO: update the code to test GetEventDetailsDataEventMatchVods
        expect(instance).to.be.a(ValorantEsportsOpenApiSpecification.GetEventDetailsDataEventMatchVods);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property parameter (base name: "parameter")', function() {
        // TODO: update the code to test the property parameter
        expect(instance).to.have.property('parameter');
        // expect(instance.parameter).to.be(expectedValueLiteral);
      });

      it('should have the property locale (base name: "locale")', function() {
        // TODO: update the code to test the property locale
        expect(instance).to.have.property('locale');
        // expect(instance.locale).to.be(expectedValueLiteral);
      });

      it('should have the property mediaLocale (base name: "mediaLocale")', function() {
        // TODO: update the code to test the property mediaLocale
        expect(instance).to.have.property('mediaLocale');
        // expect(instance.mediaLocale).to.be(expectedValueLiteral);
      });

      it('should have the property provider (base name: "provider")', function() {
        // TODO: update the code to test the property provider
        expect(instance).to.have.property('provider');
        // expect(instance.provider).to.be(expectedValueLiteral);
      });

      it('should have the property offset (base name: "offset")', function() {
        // TODO: update the code to test the property offset
        expect(instance).to.have.property('offset');
        // expect(instance.offset).to.be(expectedValueLiteral);
      });

      it('should have the property firstFrameTime (base name: "firstFrameTime")', function() {
        // TODO: update the code to test the property firstFrameTime
        expect(instance).to.have.property('firstFrameTime');
        // expect(instance.firstFrameTime).to.be(expectedValueLiteral);
      });

      it('should have the property startMillis (base name: "startMillis")', function() {
        // TODO: update the code to test the property startMillis
        expect(instance).to.have.property('startMillis');
        // expect(instance.startMillis).to.be(expectedValueLiteral);
      });

      it('should have the property endMillis (base name: "endMillis")', function() {
        // TODO: update the code to test the property endMillis
        expect(instance).to.have.property('endMillis');
        // expect(instance.endMillis).to.be(expectedValueLiteral);
      });

    });
  });

}));
