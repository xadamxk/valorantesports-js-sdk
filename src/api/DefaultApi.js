/*
 * ValorantEsports OpenApi Specification
 * Unofficial documentation to the ValorantEsports Api
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {GetEventDetails} from '../model/GetEventDetails';
import {GetEventList} from '../model/GetEventList';
import {GetLeagues} from '../model/GetLeagues';
import {GetLeaguesForStandings} from '../model/GetLeaguesForStandings';
import {GetLiveDetails} from '../model/GetLiveDetails';
import {GetSchedule} from '../model/GetSchedule';
import {GetStandings} from '../model/GetStandings';
import {GetVods} from '../model/GetVods';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the getEventDetails operation.
     * @callback moduleapi/DefaultApi~getEventDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEventDetails{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get getEventDetails record
     * @param {Object} opts Optional parameters
     * @param {String} opts.hl hl
     * @param {Number} opts.id id
     * @param {module:api/DefaultApi~getEventDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getEventDetails(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'hl': opts['hl'],'id': opts['id']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEventDetails;

      return this.apiClient.callApi(
        '/getEventDetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getEventList operation.
     * @callback moduleapi/DefaultApi~getEventListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEventList{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get getEventList record
     * @param {Object} opts Optional parameters
     * @param {String} opts.hl hl
     * @param {String} opts.sport sport
     * @param {Number} opts.leagueId leagueId
     * @param {module:api/DefaultApi~getEventListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getEventList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'hl': opts['hl'],'sport': opts['sport'],'leagueId': opts['leagueId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEventList;

      return this.apiClient.callApi(
        '/getEventList', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getLeagues operation.
     * @callback moduleapi/DefaultApi~getLeaguesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLeagues{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get getLeagues record
     * @param {Object} opts Optional parameters
     * @param {String} opts.hl hl
     * @param {String} opts.sport sport
     * @param {module:api/DefaultApi~getLeaguesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getLeagues(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'hl': opts['hl'],'sport': opts['sport']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLeagues;

      return this.apiClient.callApi(
        '/getLeagues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getLeaguesForStandings operation.
     * @callback moduleapi/DefaultApi~getLeaguesForStandingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLeaguesForStandings{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get getLeaguesForStandings record
     * @param {Object} opts Optional parameters
     * @param {String} opts.hl hl
     * @param {String} opts.sport sport
     * @param {module:api/DefaultApi~getLeaguesForStandingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getLeaguesForStandings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'hl': opts['hl'],'sport': opts['sport']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLeaguesForStandings;

      return this.apiClient.callApi(
        '/getLeaguesForStandings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getLiveDetails operation.
     * @callback moduleapi/DefaultApi~getLiveDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLiveDetails{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get getLiveDetails record
     * @param {Object} opts Optional parameters
     * @param {String} opts.hl hl
     * @param {String} opts.sport sport
     * @param {module:api/DefaultApi~getLiveDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getLiveDetails(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'hl': opts['hl'],'sport': opts['sport']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLiveDetails;

      return this.apiClient.callApi(
        '/getLiveDetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getSchedule operation.
     * @callback moduleapi/DefaultApi~getScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSchedule{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get getSchedule record
     * @param {Object} opts Optional parameters
     * @param {String} opts.hl hl
     * @param {String} opts.sport sport
     * @param {String} opts.eventState eventState
     * @param {module:api/DefaultApi~getScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getSchedule(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'hl': opts['hl'],'sport': opts['sport'],'eventState': opts['eventState']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetSchedule;

      return this.apiClient.callApi(
        '/getSchedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getStandings operation.
     * @callback moduleapi/DefaultApi~getStandingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStandings{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get getStandings record
     * @param {Object} opts Optional parameters
     * @param {String} opts.hl hl
     * @param {String} opts.sport sport
     * @param {Number} opts.tournamentId tournamentId
     * @param {module:api/DefaultApi~getStandingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getStandings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'hl': opts['hl'],'sport': opts['sport'],'tournamentId': opts['tournamentId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetStandings;

      return this.apiClient.callApi(
        '/getStandings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getVods operation.
     * @callback moduleapi/DefaultApi~getVodsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetVods{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get getVods record
     * @param {Object} opts Optional parameters
     * @param {String} opts.hl hl
     * @param {String} opts.sport sport
     * @param {Number} opts.tournamentId tournamentId
     * @param {module:api/DefaultApi~getVodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getVods(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'hl': opts['hl'],'sport': opts['sport'],'tournamentId': opts['tournamentId']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetVods;

      return this.apiClient.callApi(
        '/getVods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}